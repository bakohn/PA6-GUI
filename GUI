package sv.shenandoah;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.stage.Stage;

import java.util.ArrayList;

public class App extends Application {
    private ArrayList<Student> studentList = new ArrayList<>();
    private ArrayList<Instructor> instructorList = new ArrayList<>();
    private ArrayList<Course> courseList = new ArrayList<>();

    @Override
    public void start(Stage stage) {
        // Create labels
        Label titleLabel = new Label("Manage Information");
        Label infoLabel = new Label("Select Information Type:");

        // Create buttons for switching between student, instructor, and course views
        Button studentButton = new Button("Student");
        Button instructorButton = new Button("Instructor");
        Button courseButton = new Button("Course");

        // Create a tab pane for different views
        TabPane tabPane = new TabPane();

        // Student view
        Tab studentTab = new Tab("Student");
        studentTab.setContent(createStudentView());
        tabPane.getTabs().add(studentTab);

        // Instructor view
        Tab instructorTab = new Tab("Instructor");
        instructorTab.setContent(createInstructorView());
        tabPane.getTabs().add(instructorTab);

        // Course view
        Tab courseTab = new Tab("Course");
        courseTab.setContent(createCourseView());
        tabPane.getTabs().add(courseTab);

        // Create the layout
        GridPane gridPane = new GridPane();
        gridPane.setHgap(10);
        gridPane.setVgap(10);
        gridPane.add(titleLabel, 0, 0, 3, 1);
        gridPane.add(infoLabel, 0, 1, 3, 1);
        gridPane.add(studentButton, 0, 2);
        gridPane.add(instructorButton, 1, 2);
        gridPane.add(courseButton, 2, 2);
        gridPane.add(tabPane, 0, 3, 3, 1);

        // Event handlers for switching between views
        studentButton.setOnAction(event -> tabPane.getSelectionModel().select(studentTab));
        instructorButton.setOnAction(event -> tabPane.getSelectionModel().select(instructorTab));
        courseButton.setOnAction(event -> tabPane.getSelectionModel().select(courseTab));

        // Create the scene
        Scene scene = new Scene(gridPane, 800, 600);

        // Set the scene to the stage
        stage.setScene(scene);

        // Set the title of the stage
        stage.setTitle("Information Management");

        // Show the stage
        stage.show();
    }

    private GridPane createStudentView() {
        // Create labels
        Label titleLabel = new Label("Add Student");
        Label nameLabel = new Label("Name:");
        Label yearLabel = new Label("Year:");
        Label majorLabel = new Label("Major:");
        Label gpaLabel = new Label("GPA:");
        Label emailLabel = new Label("Email:");

        // Create text fields
        TextField nameTextField = new TextField();
        TextField majorTextField = new TextField();
        TextField gpaTextField = new TextField();
        TextField emailTextField = new TextField();

        // Create year dropdown menu
        ComboBox<String> yearComboBox = new ComboBox<>(FXCollections.observableArrayList("Freshman", "Sophomore", "Junior", "Senior"));
        yearComboBox.setPromptText("Select Year");

        // Create save button
        Button saveButton = new Button("Add Student");
        saveButton.setOnAction(event -> {
            // Capture the entered information
            String name = nameTextField.getText();
            String year = yearComboBox.getValue();
            String major = majorTextField.getText();
            double gpa = Double.parseDouble(gpaTextField.getText()); // Assuming GPA is a double
            String email = emailTextField.getText();

            // Create a Student object and add it to the ArrayList
            Student student = new Student(name, year, major, gpa, email);
            studentList.add(student);

            // Clear the fields for the next entry
            nameTextField.clear();
            yearComboBox.getSelectionModel().clearSelection();
            majorTextField.clear();
            gpaTextField.clear();
            emailTextField.clear();
        });

        // Create the layout
        GridPane gridPane = new GridPane();
        gridPane.setHgap(10);
        gridPane.setVgap(10);
        gridPane.add(titleLabel, 0, 0, 2, 1);
        gridPane.add(nameLabel, 0, 1);
        gridPane.add(nameTextField, 1, 1);
        gridPane.add(yearLabel, 0, 2);
        gridPane.add(yearComboBox, 1, 2);
        gridPane.add(majorLabel, 0, 3);
        gridPane.add(majorTextField, 1, 3);
        gridPane.add(gpaLabel, 0, 4);
        gridPane.add(gpaTextField, 1, 4);
        gridPane.add(emailLabel, 0, 5);
        gridPane.add(emailTextField, 1, 5);
        gridPane.add(saveButton, 0, 6, 2, 1);

        return gridPane;
    }

    private GridPane createInstructorView() {
        // Create labels for instructor view
        Label titleLabel = new Label("Add Instructor");
        Label nameLabel = new Label("Name:");
        Label prefixLabel = new Label("Prefix:");
        Label departmentLabel = new Label("Department:");
        Label officeLocationLabel = new Label("Office Location:");
        Label emailLabel = new Label("Email:");

        // Create text fields for instructor view
        TextField nameTextField = new TextField();
        TextField prefixTextField = new TextField();
        TextField departmentTextField = new TextField();
        TextField officeLocationTextField = new TextField();
        TextField emailTextField = new TextField();

        // Create save button for instructor view
        Button saveButton = new Button("Add Instructor");
        saveButton.setOnAction(event -> {
            // Capture the entered information
            String name = nameTextField.getText();
            String prefix = prefixTextField.getText();
            String department = departmentTextField.getText();
            String officeLocation = officeLocationTextField.getText();
            String email = emailTextField.getText();

            // Create an Instructor object and add it to the ArrayList
            Instructor instructor = new Instructor(name, prefix, officeLocation, department, email, 199, 200);
            instructorList.add(instructor);

            // Clear the fields for the next entry
            nameTextField.clear();
            prefixTextField.clear();
            departmentTextField.clear();
            officeLocationTextField.clear();
            emailTextField.clear();
        });

        // Create the layout for instructor view
        GridPane gridPane = new GridPane();
        gridPane.setHgap(10);
        gridPane.setVgap(10);
        gridPane.add(titleLabel, 0, 0, 2, 1);
        gridPane.add(nameLabel, 0, 1);
        gridPane.add(nameTextField, 1, 1);
        gridPane.add(prefixLabel, 0, 2);
        gridPane.add(prefixTextField, 1, 2);
        gridPane.add(departmentLabel, 0, 3);
        gridPane.add(departmentTextField, 1, 3);
        gridPane.add(officeLocationTextField, 1, 4);
        gridPane.add(emailLabel, 0, 5);
        gridPane.add(emailTextField, 1, 5);
        gridPane.add(saveButton, 0, 6, 2, 1);

        return gridPane;
    }

    private GridPane createCourseView() {
        // Create labels for course view
        Label titleLabel = new Label("Add Course");
        Label nameLabel = new Label("Name:");
        Label buildingLabel = new Label("Building:");
        Label roomLabel = new Label("Room:");
        Label capacityLabel = new Label("Capacity:");
        Label instructorLabel = new Label("Instructor:");

        // Create text fields for course view
        TextField nameTextField = new TextField();
        TextField buildingTextField = new TextField();
        TextField roomTextField = new TextField();
        TextField capacityTextField = new TextField();
        ComboBox<Instructor> instructorComboBox = new ComboBox<>(FXCollections.observableArrayList(instructorList));
        instructorComboBox.setPromptText("Select Instructor");

        // Create save button for course view
        Button saveButton = new Button("Add Course");
        saveButton.setOnAction(event -> {
            // Capture the entered information
            String name = nameTextField.getText();
            String building = buildingTextField.getText();
            String room = roomTextField.getText();
            int capacity = Integer.parseInt(capacityTextField.getText()); // Assuming capacity is an integer
            Instructor instructor = instructorComboBox.getValue();

            // Create a Course object and add it to the ArrayList
            Course course = new Course(name, building, room, capacity);
            course.assignInstructor(instructor);
            courseList.add(course);

            // Clear the fields for the next entry
            nameTextField.clear();
            buildingTextField.clear();
            roomTextField.clear();
            capacityTextField.clear();
            instructorComboBox.getSelectionModel().clearSelection();
        });

        // Create the layout for course view
        GridPane gridPane = new GridPane();
        gridPane.setHgap(10);
        gridPane.setVgap(10);
        gridPane.add(titleLabel, 0, 0, 2, 1);
        gridPane.add(nameLabel, 0, 1);
        gridPane.add(nameTextField, 1, 1);
        gridPane.add(buildingLabel, 0, 2);
        gridPane.add(buildingTextField, 1, 2);
        gridPane.add(roomLabel, 0, 3);
        gridPane.add(roomTextField, 1, 3);
        gridPane.add(capacityLabel, 0, 4);
        gridPane.add(capacityTextField, 1, 4);
        gridPane.add(instructorLabel, 0, 5);
        gridPane.add(instructorComboBox, 1, 5);
        gridPane.add(saveButton, 0, 6, 2, 1);

        return gridPane;
    }

    public static void main(String[] args) {
        launch(args);
    }
}
