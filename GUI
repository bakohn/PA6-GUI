package sv.shenandoah;

import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

import java.util.ArrayList;

public class App extends Application {
    private ArrayList<Student> studentList = new ArrayList<>();
    private ArrayList<Instructor> instructorList = new ArrayList<>();
    private ArrayList<Course> courseList = new ArrayList<>();

    @Override
    public void start(Stage stage) {
        // Create labels for student view
        Label studentTitleLabel = new Label("Add Student");
        Label studentNameLabel = new Label("Name:");
        Label studentYearLabel = new Label("Year:");
        Label studentMajorLabel = new Label("Major:");
        Label studentGPALabel = new Label("GPA:");
        Label studentEmailLabel = new Label("Email:");

        // Create text fields for student view
        TextField studentNameTextField = new TextField();
        ComboBox<String> studentYearComboBox = new ComboBox<>(FXCollections.observableArrayList("Freshman", "Sophomore", "Junior", "Senior"));
        studentYearComboBox.setPromptText("Select Year");
        TextField studentMajorTextField = new TextField();
        TextField studentGPATextField = new TextField();
        TextField studentEmailTextField = new TextField();

        // Create save button for student view
        Button studentSaveButton = new Button("Add Student");
        studentSaveButton.setOnAction(event -> {
            // Capture the entered information
            String name = studentNameTextField.getText();
            String year = studentYearComboBox.getValue();
            String major = studentMajorTextField.getText();
            double gpa = Double.parseDouble(studentGPATextField.getText()); // Assuming GPA is a double
            String email = studentEmailTextField.getText();

            // Create a Student object and add it to the ArrayList
            Student student = new Student(name, year, major, gpa, email);
            studentList.add(student);

            // Clear the fields for the next entry
            studentNameTextField.clear();
            studentYearComboBox.getSelectionModel().clearSelection();
            studentMajorTextField.clear();
            studentGPATextField.clear();
            studentEmailTextField.clear();
        });

        // Create labels for course view
        Label courseTitleLabel = new Label("Add Course");
        Label courseNameLabel = new Label("Name:");
        Label courseBuildingLabel = new Label("Building:");
        Label courseRoomLabel = new Label("Room:");
        Label courseCapacityLabel = new Label("Capacity:");
        Label courseInstructorLabel = new Label("Instructor:");

        // Create text fields for course view
        TextField courseNameTextField = new TextField();
        TextField courseBuildingTextField = new TextField();
        TextField courseRoomTextField = new TextField();
        TextField courseCapacityTextField = new TextField();
        ComboBox<Instructor> courseInstructorComboBox = new ComboBox<>(FXCollections.observableArrayList(instructorList));
        courseInstructorComboBox.setPromptText("Select Instructor");

        // Create save button for course view
        Button courseSaveButton = new Button("Add Course");
        courseSaveButton.setOnAction(event -> {
            // Capture the entered information
            String name = courseNameTextField.getText();
            String building = courseBuildingTextField.getText();
            String room = courseRoomTextField.getText();
            int capacity = Integer.parseInt(courseCapacityTextField.getText()); // Assuming capacity is an integer
            Instructor instructor = courseInstructorComboBox.getValue();

            // Create a Course object and add it to the ArrayList
            Course course = new Course(name, building, room, capacity);
            course.assignInstructor(instructor);
            courseList.add(course);

            // Clear the fields for the next entry
            courseNameTextField.clear();
            courseBuildingTextField.clear();
            courseRoomTextField.clear();
            courseCapacityTextField.clear();
            courseInstructorComboBox.getSelectionModel().clearSelection();
        });

        // Create labels for instructor view
        Label instructorTitleLabel = new Label("Add Instructor");
        Label instructorNameLabel = new Label("Name:");
        Label instructorPrefixLabel = new Label("Prefix:");
        Label instructorDepartmentLabel = new Label("Department:");
        Label instructorOfficeLabel = new Label("Office Location:");
        Label instructorEmailLabel = new Label("Email:");

        // Create text fields for instructor view
        TextField instructorNameTextField = new TextField();
        TextField instructorPrefixTextField = new TextField();
        TextField instructorDepartmentTextField = new TextField();
        TextField instructorOfficeTextField = new TextField();
        TextField instructorEmailTextField = new TextField();

        // Create save button for instructor view
        Button instructorSaveButton = new Button("Add Instructor");
        instructorSaveButton.setOnAction(event -> {
            // Capture the entered information
            String name = instructorNameTextField.getText();
            String prefix = instructorPrefixTextField.getText();
            String department = instructorDepartmentTextField.getText();
            String officeLocation = instructorOfficeTextField.getText();
            String email = instructorEmailTextField.getText();

            // Create an Instructor object and add it to the ArrayList
            Instructor instructor = new Instructor(name, prefix, officeLocation, department, email, 199, 200);
            instructorList.add(instructor);

            // Clear the fields for the next entry
            instructorNameTextField.clear();
            instructorPrefixTextField.clear();
            instructorDepartmentTextField.clear();
            instructorOfficeTextField.clear();
            instructorEmailTextField.clear();
        });

        // Create the layout
        GridPane gridPane = new GridPane();
        gridPane.setHgap(20);
        gridPane.setVgap(10);
        gridPane.setAlignment(Pos.CENTER);

        // Add student view components to the grid
        gridPane.add(studentTitleLabel, 0, 0);
        gridPane.add(studentNameLabel, 0, 1);
        gridPane.add(studentNameTextField, 1, 1);
        gridPane.add(studentYearLabel, 0, 2);
        gridPane.add(studentYearComboBox, 1, 2);
        gridPane.add(studentMajorLabel, 0, 3);
        gridPane.add(studentMajorTextField, 1, 3);
        gridPane.add(studentGPALabel, 0, 4);
        gridPane.add(studentGPATextField, 1, 4);
        gridPane.add(studentEmailLabel, 0, 5);
        gridPane.add(studentEmailTextField, 1, 5);
        gridPane.add(studentSaveButton, 0, 6, 2, 1);

        // Add course view components to the grid
        gridPane.add(courseTitleLabel, 2, 0);
        gridPane.add(courseNameLabel, 2, 1);
        gridPane.add(courseNameTextField, 3, 1);
        gridPane.add(courseBuildingLabel, 2, 2);
        gridPane.add(courseBuildingTextField, 3, 2);
        gridPane.add(courseRoomLabel, 2, 3);
        gridPane.add(courseRoomTextField, 3, 3);
        gridPane.add(courseCapacityLabel, 2, 4);
        gridPane.add(courseCapacityTextField, 3, 4);
        gridPane.add(courseInstructorLabel, 2, 5);
        gridPane.add(courseInstructorComboBox, 3, 5);
        gridPane.add(courseSaveButton, 2, 6, 2, 1);

        // Add instructor view components to the grid
        gridPane.add(instructorTitleLabel, 4, 0);
        gridPane.add(instructorNameLabel, 4, 1);
                gridPane.add(instructorNameTextField, 5, 1);
        gridPane.add(instructorPrefixLabel, 4, 2);
        gridPane.add(instructorPrefixTextField, 5, 2);
        gridPane.add(instructorDepartmentLabel, 4, 3);
        gridPane.add(instructorDepartmentTextField, 5, 3);
        gridPane.add(instructorOfficeLabel, 4, 4);
        gridPane.add(instructorOfficeTextField, 5, 4);
        gridPane.add(instructorEmailLabel, 4, 5);
        gridPane.add(instructorEmailTextField, 5, 5);
        gridPane.add(instructorSaveButton, 4, 6, 2, 1);

        // Create the scene
        Scene scene = new Scene(gridPane, 1000, 400);

        // Set the scene to the stage
        stage.setScene(scene);

        // Set the title of the stage
        stage.setTitle("Information Management");

        // Show the stage
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}

